# Encoding: utf-8

Структура пакета: <Код><Длина пакета><Пакет>

Коды пакетов:
<Код> - <Описание> (<Получатель пакетов такого типа>)
0 - Пинг (сервер, клиент)
1 - Регистрация пользователя (сервер)
2 - Логин пользователя (сервер, клиент)
3 - Запрос списка IP (сервер, клиент)
4 - Удаление пользователя (сервер)
5 - Сообщение (текст) (клиент)
6 - Сообщение (файл) (клиент)

255 - Неверный пароль (клиент)
254 - Логин занят (клиент)
253 - Сначала нужно залогиниться (клиент)
252 - Зарезервированный логин

P2P-lib - для ф-ций, которые используются и клиентом, и сервером.

Работа с P2P_client.Client:
1. При смене пользователя - нужно создавать новый объект класса Client.
2. Параметры конструктора: 
  * login, password - тут всё понятно, объяснять, думаю, ни к чему
  * on_receive_callback - сюда надо передать функцию (именно саму функцию, т.е. <имя функции>, а не <имя функции>(...) - как в unittest.TestCase.assertRaises). Она будет вызвана, если придёт новое сообщение. Эта функция должна принимать три аргумента: массив байт, который будет содержать собственно полученное сообщение (тип bytes), логин того, кто сообщение прислал (тип str) и IP того, кто его прислал (тип str).
  * need_registration - необязательный аргумент, если мы создаём нового пользователя - надо передать True, иначе можно не передавать ничего.
3. Некоторые функции объявлены как async. Их можно вызывать двумя способами - либо await <имя функции> (но это только из другой async функции), либо asyncio.run(<имя функции>). Подробней (что это, зачем оно надо и как работает) - расскажу голосом.
